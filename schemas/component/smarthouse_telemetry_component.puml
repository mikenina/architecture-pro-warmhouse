@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
!include osaPuml/Common.puml
!include osaPuml/Site/all.puml

LAYOUT_LEFT_RIGHT()

AddElementTag("facade", $bgColor="#fdae61", $fontColor="black")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddElementTag("databus", $shape=RoundedBoxShape(), $bgColor="lightYellow", $fontColor="black")
AddElementTag("controller", $bgColor="lightgrey", $fontColor="black")
AddRelTag("async", $textColor=$ARROW_FONT_COLOR, $lineColor=$ARROW_COLOR, $lineStyle=DashedLine())

Container(spa, "SPA", "Javascript", "Веб-интерфейс Личного Кабинета пользователя", $tags = "facade")
ContainerDb(device_db, "Device Database", "SQL Database", "БД устройств", $tags = "storage")
ContainerDb(device_command_bus, "Device Cmd Topic", "AMQP", "Очередь команд", $tags = "databus")
ContainerDb(telemetry_bus, "Telemetry Topic", "AMQP", "Очередь данных с устройств", $tags = "databus")
System_Ext(device, "Устройство", "Устройства, модули установленные в домах", $sprite="osa_site_neighbourhood")
Container(streaming_microservice, "Streaming Microservice", "", "Микросервис видео")

Container_Boundary(device_microservice, "Микросервис управления устройствами") {
    Component(device_microservice.location_controller, "LocationController", "MVC Rest Controller", "Управление адресами", $tags = "controller")
    Component(device_microservice.device_controller, "DeviceController", "MVC Rest Controller", "Управление устройствами", $tags = "controller")
    Component(device_microservice.scenario_controller, "ScenarioController", "MVC Rest Controller", "Настройка сценариев работы", $tags = "controller")
    Component(device_microservice.command_controller, "CommandController", "", "API управления логикой состояний пользовательских команд", $tags = "controller")

    Component(device_microservice.location_service, "LocationService", "Backend", "Управление адресами")
    Component(device_microservice.device_service, "DeviceService", "Backend", "Управление устройствами")
    Component(device_microservice.scenario_service, "ScenarioService", "Backend", "Настройка сценариев работы")
    Component(device_microservice.command_journal_service, "CommandJournalService", "Backend", "Логика состояний пользовательских команд")
}

Container_Boundary(ext_device_api_gateway, "Фасад для взаимодействия с подключенными устройствами") {
    Component(ext_device_api_gateway.emergency_command_controller, "EmergencyCommandController", "", "API для синхронного выполнения команд на удаленных устройствах", $tags = "facade")
    Component(ext_device_api_gateway.command_consumer, "CommandConsumer", "Backend", "Точка входа для асинхронного процессинга команд", $tags = "facade")
    Component(ext_device_api_gateway.command_service, "CommandService", "Backend", "Логика коммуникации с внешними устройствами")
    Component(ext_device_api_gateway.device_data_api, "DeviceDataAPI", "Backend", "Логика маршрутизации данных с устройств", $tags = "facade")
}

Rel(spa, device_microservice.location_controller, "API операций адресами", "sync, JSON/HTTPS")
Rel(spa, device_microservice.device_controller, "API операций с устройствами", "sync, JSON/HTTPS")
Rel(spa, device_microservice.scenario_controller, "API пользовательских сценариев", "sync, JSON/HTTPS")
Rel(spa, device_microservice.command_controller, "API выполнения пользовательских команд", "sync, JSON/HTTPS")

Rel(device_microservice.location_controller, device_microservice.location_service, "")
Rel(device_microservice.device_controller, device_microservice.device_service, "")
Rel(device_microservice.scenario_controller, device_microservice.scenario_service, "")
Rel(device_microservice.command_controller, device_microservice.command_journal_service, "")

Rel(device_microservice.scenario_service, device_microservice.command_journal_service, "Выполнение автоматических команд")

Rel(device_microservice.location_service, device_db, "", "JDBC")
Rel(device_microservice.device_service, device_db, "", "JDBC")
Rel(device_microservice.scenario_service, device_db, "", "JDBC")

Rel(device_microservice.command_journal_service, device_db, , "", "JDBC")
Rel(device_microservice.command_journal_service, device_command_bus, "Публикует сообщения в", $tags = "async")
Rel(device_microservice.command_journal_service, ext_device_api_gateway.emergency_command_controller, "Синхронное выполнение неотложных команд", "sync, JSON/HTTPS | JSON-RPC")

Rel(ext_device_api_gateway.command_consumer, device_command_bus, "Читает из", $tags = "async")
Rel(ext_device_api_gateway.command_consumer, ext_device_api_gateway.command_service, "")
Rel(ext_device_api_gateway.emergency_command_controller, ext_device_api_gateway.command_service, "")
BiRel(ext_device_api_gateway.command_service, device, "Коммуникация с внешним устройством, sync")

Rel(device, ext_device_api_gateway.device_data_api, "Посылает данные, sync")
Rel(ext_device_api_gateway.device_data_api, streaming_microservice, "Отправляет потоковые данные с устройства в")
Rel(ext_device_api_gateway.device_data_api, telemetry_bus, "Публикует данные с устройства в", $tags = "async")
Rel(ext_device_api_gateway.device_data_api, device_microservice.device_controller, "Аутентификация устройства, определение типа", "sync, JSON/HTTPS | JSON-RPC")

@enduml