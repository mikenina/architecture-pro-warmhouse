version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: smarthome-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./smart_home/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - smarthome-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d smarthome" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  temperature-api:
    image: nginx:stable-alpine
    hostname: temperature-api-internal
    ports:
      - "8081:80"
    container_name: temperature-app
    volumes:
      - ./temperature-api/public:/var/www/app/public:ro
      - ./temperature-api/dockerfiles/nginx/default.conf:/etc/nginx/sites-available/default.conf
      - ./temperature-api/dockerfiles/nginx/default.conf:/etc/nginx/sites-enabled/default.conf
    networks:
      - smarthome-network
    restart: unless-stopped
    init: true
    tty: true

#  temperature-api:
#    build:
#      context: temperature-api-go
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#    container_name: temperature-app-go
#    networks:
#      - smarthome-network

  app:
    build:
      context: ./smart_home
      dockerfile: Dockerfile
    container_name: smarthome-app
    depends_on:
      postgres:
        condition: service_healthy
      temperature-api:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/smarthome
      - TEMPERATURE_API_URL=http://temperature-api:8081
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - smarthome-network

volumes:
  postgres_data:

networks:
  smarthome-network:
    driver: bridge